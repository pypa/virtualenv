name: check
on:
  push:
  pull_request:
  schedule:
    - cron: "0 8 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3

  test:
    name: test ${{ matrix.py }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        py:
          - "3.10"
          - "3.9"
          - "3.8"
          - "3.7"
          - "3.6"
          - "3.5"
          - pypy-3.6-v7.3.3
          - pypy-3.7-v7.3.7
          - pypy-3.8-v7.3.7
          - "2.7"
          - pypy-2.7
        os:
          - ubuntu-20.04
          - macos-10.15
          - windows-2022
        include:
          - { os: macos-10.15, py: brew@py3 }
    steps:
      - name: Install OS dependencies
        run: |
          for i in 1 2 3; do
            echo "try $i" && \
            ${{ runner.os == 'Linux' && 'sudo apt-get update -y && sudo apt-get install snapd fish csh -y' || true }} && \
            ${{ runner.os == 'Linux' && 'sudo apt-get install curl wget -y' || true }} && \
            ${{ runner.os == 'Linux' && 'nushell_url=$(curl -s https://api.github.com/repos/nushell/nushell/releases/latest | grep "browser_" | cut -d\" -f4 | grep .tar.gz)' || true }} && \
            ${{ runner.os == 'Linux' && 'wget -O nushell.tar.gz $nushell_url' || true }} && \
            ${{ runner.os == 'Linux' && 'tar -zxf nushell.tar.gz --one-top-level=nushell --strip-components=2' || true }} && \
            ${{ runner.os == 'Linux' && 'sudo cp nushell/nu /usr/bin' || true }} && \
            ${{ runner.os == 'Windows' && 'choco install nushell' || true }} && \
            ${{ runner.os == 'macOS' && 'brew update && brew install fish tcsh nushell' || true }} && \
            exit 0 || true;
          done
          exit 1
        shell: bash
      - name: Setup python for tox
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install tox
        run: python -m pip install tox
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use local virtualenv for tox
        run: python -m pip install .
      - name: Install Python 2 for cross test
        uses: actions/setup-python@v2
        with:
          python-version: "2.7"
      - name: Setup python for test ${{ matrix.py }}
        if: "!( startsWith(matrix.py,'brew@py') || endsWith(matrix.py, '-dev') )"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py }}
      - name: Setup brew python for test ${{ matrix.py }}
        if: startsWith(matrix.py,'brew@py')
        run: |
          import subprocess; import codecs; import os
          subprocess.check_call(["bash", "-c", "brew upgrade python@3 || brew install python@3"])
          with codecs.open(os.environ["GITHUB_PATH"], "a", "utf-8") as file_handler:
               file_handler.write("/usr/local/opt/python@3")
        shell: python
      - name: Pick environment to run
        run: |
          import platform; import os; import sys; import codecs
          cpy = platform.python_implementation() == "CPython"
          base =("{}{}{}" if cpy else "{}{}").format("py" if cpy else "pypy", *sys.version_info[0:2])
          env = "TOXENV={}\n".format(base)
          print("Picked:\n{}for{}".format(env, sys.version))
          with codecs.open(os.environ["GITHUB_ENV"], "a", "utf-8") as file_handler:
               file_handler.write(env)
        shell: python
      - name: Setup test suite
        run: tox -vv --notest
      - name: Run test suite
        run: tox --skip-pkg-install
        env:
          PYTEST_ADDOPTS: "-vv --durations=20"
          CI_RUN: "yes"
          DIFF_AGAINST: HEAD
      - name: Rename coverage report file
        run: import os; import sys; os.rename(".tox/.coverage.{}".format(os.environ['TOXENV']), ".tox/.coverage.{}-{}".format(os.environ['TOXENV'], sys.platform))
        shell: python
      - name: Upload coverage data
        uses: actions/upload-artifact@v2
        with:
          name: coverage-data
          path: ".tox/.coverage.*"

  coverage:
    name: Combine coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install tox
        run: python -m pip install tox
      - name: Setup coverage tool
        run: tox -e coverage --notest
      - name: Install package builder
        run: python -m pip install build
      - name: Build package
        run: pyproject-build --wheel .
      - name: Download coverage data
        uses: actions/download-artifact@v2
        with:
          name: coverage-data
          path: .tox
      - name: Combine and report coverage
        run: tox -e coverage
      - name: Upload HTML report
        uses: actions/upload-artifact@v2
        with:
          name: html-report
          path: .tox/htmlcov

  check:
    name: ${{ matrix.tox_env }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - windows-2022
        tox_env:
          - dev
          - docs
          - readme
          - upgrade
          - zipapp
        exclude:
          - { os: windows-2022, tox_env: readme }
          - { os: windows-2022, tox_env: docs }
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Python "3.10"
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install tox
        run: python -m pip install tox
      - name: Run check for ${{ matrix.tox_env }}
        run: python -m tox -e ${{ matrix.tox_env }}
        env:
          UPGRADE_ADVISORY: "yes"

  publish:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [check, coverage, lint]
    runs-on: ubuntu-20.04
    steps:
      - name: Setup python to build package
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install https://pypi.org/project/build
        run: python -m pip install build
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build sdist and wheel
        run: python -m build -s -w . -o dist
      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@master
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.pypi_password }}
