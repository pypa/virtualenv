name: check
on:
  workflow_dispatch:
  push:
    branches: ["main"]
    tags-ignore: ["**"]
  pull_request:
  schedule:
    - cron: "0 8 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: test ${{ matrix.py }} - ${{ matrix.os }}
    if: github.event_name != 'schedule' || github.repository_owner == 'pypa'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        py:
          - "3.13"
          - "3.12"
          - "3.11"
          - "3.10"
          - "3.9"
          - "3.8"
          - pypy-3.10
          - pypy-3.9
          - pypy-3.8
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        include:
          - { os: macos-latest, py: "brew@3.11" }
          - { os: macos-latest, py: "brew@3.10" }
          - { os: macos-latest, py: "brew@3.9" }
        exclude:
          - { os: windows-latest, py: "pypy-3.10" }
          - { os: windows-latest, py: "pypy-3.9" }
          - { os: windows-latest, py: "pypy-3.8" }
    steps:
      - uses: taiki-e/install-action@cargo-binstall
      - name: Install OS dependencies
        run: |
          set -x
          for i in 1 2 3; do
            echo "try $i" && \
            ${{ runner.os == 'Linux' && 'sudo apt-get update -y && sudo apt-get install snapd fish csh -y' || true }} && \
            ${{ runner.os == 'Linux' && 'cargo binstall -y nu' || true }} && \
            ${{ runner.os == 'macOS' && 'brew install fish tcsh nushell' || true }} && \
            ${{ runner.os == 'Windows' && 'choco install nushell' || true }} && \
            exit 0 || true;
            sleep 1
          done
          exit 1
        shell: bash
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Add .local/bin to PATH Windows
        if: runner.os == 'Windows'
        shell: bash
        run: echo "$USERPROFILE/.local/bin" >> $GITHUB_PATH
      - name: Add .local/bin to PATH macos-13
        if: matrix.os == 'macos-13'
        shell: bash
        run: echo ~/.local/bin >> $GITHUB_PATH
      - name: Install tox
        if: matrix.py == '3.13'
        run: uv tool install --python-preference only-managed --python 3.12 tox --with tox-uv
      - name: Install tox
        if: matrix.py != '3.13'
        run: uv tool install --python-preference only-managed --python 3.13 tox --with tox-uv
      - name: Setup brew python for test ${{ matrix.py }}
        if: startsWith(matrix.py,'brew@')
        run: |
          set -e
          PY=$(echo '${{ matrix.py }}' | cut -c 6-)
          brew cleanup && brew upgrade python@$PY || brew install python@$PY
          echo "/usr/local/opt/python@$PY/libexec/bin" >>"${GITHUB_PATH}"
        shell: bash
      - name: Setup python for test ${{ matrix.py }}
        if: "!( startsWith(matrix.py,'brew@') || endsWith(matrix.py, '-dev') )"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
          allow-prereleases: true
      - name: Pick environment to run
        run: python tasks/pick_tox_env.py ${{ matrix.py }}
      - name: Setup test suite
        run: tox run -vv --notest --skip-missing-interpreters false
      - name: Run test suite
        run: tox run --skip-pkg-install
        timeout-minutes: 20
        env:
          PYTEST_ADDOPTS: "-vv --durations=20"
          CI_RUN: "yes"
          DIFF_AGAINST: HEAD

  check:
    name: ${{ matrix.tox_env }} - ${{ matrix.os }}
    if: github.event_name != 'schedule' || github.repository_owner == 'pypa'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        tox_env:
          - dev
          - docs
          - readme
          - upgrade
          - zipapp
        exclude:
          - { os: windows-latest, tox_env: readme }
          - { os: windows-latest, tox_env: docs }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Add .local/bin to Windows PATH
        if: runner.os == 'Windows'
        shell: bash
        run: echo "$USERPROFILE/.local/bin" >> $GITHUB_PATH
      - name: Install tox
        run: uv tool install --python-preference only-managed --python 3.13 tox --with tox-uv
      - name: Setup check suite
        run: tox r -vv --notest --skip-missing-interpreters false -e ${{ matrix.tox_env }}
      - name: Run check for ${{ matrix.tox_env }}
        run: tox r --skip-pkg-install -e ${{ matrix.tox_env }}
