[tox]
requires =
    tox>=4.2
env_list =
    fix
    pypy3
    3.13
    3.12
    3.11
    3.10
    3.9
    3.8
    coverage
    readme
    docs
skip_missing_interpreters = true

[testenv]
description = run tests with {basepython}
package = wheel
wheel_build_env = .pkg
extras =
    test
pass_env =
    CI_RUN
    PYTEST_*
    TERM
set_env =
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    COVERAGE_PROCESS_START = {toxinidir}/pyproject.toml
    PYTHONWARNDEFAULTENCODING = 1
    _COVERAGE_SRC = {envsitepackagesdir}/virtualenv
commands =
    coverage erase
    coverage run -m pytest {posargs:--junitxml "{toxworkdir}/junit.{envname}.xml" tests --int}
    coverage combine
    coverage report --skip-covered --show-missing
    coverage xml -o "{toxworkdir}/coverage.{envname}.xml"
    coverage html -d {envtmpdir}/htmlcov --show-contexts  --title virtualenv-{envname}-coverage
uv_seed = true

[testenv:fix]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
skip_install = true
deps =
    pre-commit-uv>=4.1.1
commands =
    pre-commit run --all-files --show-diff-on-failure

[testenv:readme]
description = check that the long description is valid
skip_install = true
deps =
    check-wheel-contents>=0.6
    twine>=5.1.1
    uv>=0.4.10
commands =
    uv build --sdist --wheel --out-dir {envtmpdir} .
    twine check {envtmpdir}{/}*
    check-wheel-contents --no-config {envtmpdir}

[testenv:docs]
description = build documentation
extras =
    docs
commands =
    sphinx-build -d "{envtmpdir}/doctree" docs "{toxworkdir}/docs_out" --color -b html {posargs:-W}
    python -c 'import pathlib; print("documentation available under file://\{0\}".format(pathlib.Path(r"{toxworkdir}") / "docs_out" / "index.html"))'

[testenv:upgrade]
description = upgrade pip/wheels/setuptools to latest
skip_install = true
deps =
    ruff>=0.6.5
pass_env =
    UPGRADE_ADVISORY
change_dir = {toxinidir}/tasks
commands =
    - python upgrade_wheels.py
uv_seed = true

[testenv:release]
description = do a release, required posarg of the version number
deps =
    gitpython>=3.1.43
    packaging>=24.1
    towncrier>=24.8
change_dir = {toxinidir}/tasks
commands =
    python release.py --version {posargs}

[testenv:dev]
description = generate a DEV environment
package = editable
extras =
    docs
    test
commands =
    uv pip tree
    python -c 'import sys; print(sys.executable)'

[testenv:zipapp]
description = generate a zipapp
skip_install = true
deps =
    packaging>=24.1
commands =
    python tasks/make_zipapp.py
uv_seed = true
