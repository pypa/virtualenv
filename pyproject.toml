[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs>=0.3",
  "hatchling>=1.17.1",
]

[project]
name = "virtualenv"
description = "Virtual Python Environment builder"
readme = "README.md"
keywords = [
  "environments",
  "isolated",
  "virtual",
]
license = "MIT"
maintainers = [{ name = "Bernat Gabor", email = "gaborjbernat@gmail.com" }]
requires-python = ">=3.7"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Testing",
  "Topic :: Utilities",
]
dynamic = [
  "version",
]
dependencies = [
  "distlib<1,>=0.3.7",
  "filelock<4,>=3.12.2",
  'importlib-metadata>=6.6; python_version < "3.8"',
  "platformdirs<4,>=3.9.1",
]
optional-dependencies.docs = [
  "furo>=2023.7.26",
  "proselint>=0.13",
  "sphinx>=7.1.2",
  "sphinx-argparse>=0.4",
  "sphinxcontrib-towncrier>=0.2.1a0",
  "towncrier>=23.6",
]
optional-dependencies.test = [
  "covdefaults>=2.3",
  "coverage>=7.2.7",
  "coverage-enable-subprocess>=1",
  "flaky>=3.7",
  "packaging>=23.1",
  "pytest>=7.4",
  "pytest-env>=0.8.2",
  'pytest-freezer>=0.4.8; platform_python_implementation == "PyPy"',
  "pytest-mock>=3.11.1",
  "pytest-randomly>=3.12",
  "pytest-timeout>=2.1",
  "setuptools>=68",
  'time-machine>=2.10; platform_python_implementation == "CPython"',
]
urls.Documentation = "https://virtualenv.pypa.io"
urls.Homepage = "https://github.com/pypa/virtualenv"
urls.Source = "https://github.com/pypa/virtualenv"
urls.Tracker = "https://github.com/pypa/virtualenv/issues"
scripts.virtualenv = "virtualenv.__main__:run_with_catch"
[project.entry-points."virtualenv.activate"]
bash = "virtualenv.activation.bash:BashActivator"
batch = "virtualenv.activation.batch:BatchActivator"
cshell = "virtualenv.activation.cshell:CShellActivator"
fish = "virtualenv.activation.fish:FishActivator"
nushell = "virtualenv.activation.nushell:NushellActivator"
powershell = "virtualenv.activation.powershell:PowerShellActivator"
python = "virtualenv.activation.python:PythonActivator"
[project.entry-points."virtualenv.create"]
cpython3-mac-brew = "virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython3macOsBrew"
cpython3-mac-framework = "virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython3macOsFramework"
cpython3-posix = "virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Posix"
cpython3-win = "virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Windows"
pypy3-posix = "virtualenv.create.via_global_ref.builtin.pypy.pypy3:PyPy3Posix"
pypy3-win = "virtualenv.create.via_global_ref.builtin.pypy.pypy3:Pypy3Windows"
venv = "virtualenv.create.via_global_ref.venv:Venv"
[project.entry-points."virtualenv.discovery"]
builtin = "virtualenv.discovery.builtin:Builtin"
[project.entry-points."virtualenv.seed"]
app-data = "virtualenv.seed.embed.via_app_data.via_app_data:FromAppData"
pip = "virtualenv.seed.embed.pip_invoke:PipInvoke"

[tool.hatch]
build.hooks.vcs.version-file = "src/virtualenv/version.py"
build.targets.sdist.include = ["/src", "/tests", "/tasks", "/tox.ini"]
version.source = "vcs"

[tool.black]
line-length = 120

[tool.ruff]
select = ["ALL"]
line-length = 120
target-version = "py37"
isort = {known-first-party = ["virtualenv"], required-imports = ["from __future__ import annotations"]}
ignore = [
    "ANN",  # no type checking added yet
    "D10",  # no docstrings
    "D40",  # no imperative mode for docstrings
    "PTH",  # no pathlib, <=39 has problems on Windows with absolute/resolve, can revisit once we no longer need 39
    "INP001",  # ignore implicit namespace packages
    "D203",  # `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible
    "D212",  # `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible
    "S104",  # Possible binding to all interface
]
[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # asserts allowed in tests...
    "FBT",  # don"t care about booleans as positional arguments in tests
    "INP001", # no implicit namespace
    "D",  # don"t care about documentation in tests
    "S603",  # `subprocess` call: check for execution of untrusted input
    "PLR2004",  # Magic value used in comparison, consider replacing with a constant variable
]

[tool.pytest.ini_options]
markers = ["slow"]
timeout = 600
addopts = "--showlocals --no-success-flaky-report"
env = ["PYTHONIOENCODING=utf-8"]

[tool.coverage]
html.show_contexts = true
html.skip_covered = false
report.omit = [
  # site.py is ran before the coverage can be enabled, no way to measure coverage on this
  "**/src/virtualenv/create/via_global_ref/builtin/python2/site.py",
  "**/src/virtualenv/create/via_global_ref/_virtualenv.py",
  "**/src/virtualenv/activation/python/activate_this.py",
  "**/src/virtualenv/seed/wheels/embed/pip-*.whl/pip/**",
]
paths.source = ["src", "**/site-packages"]
report.fail_under = 76
run.source = ["${_COVERAGE_SRC}", "tests"]
run.dynamic_context = "test_function"
run.parallel = true
run.plugins = ["covdefaults"]
run.relative_files = true

[tool.towncrier]
name = "tox"
filename = "docs/changelog.rst"
directory = "docs/changelog"
title_format = false
issue_format = ":issue:`{issue}`"
template = "docs/changelog/template.jinja2"
